// Generated by CoffeeScript 1.4.0
(function() {
  var childWindows, closeChildWindows, numberOfWindowsToOpen, originalRunTestsEverywhere, recorded_arguments, runBeforeTests, runTests;

  originalRunTestsEverywhere = Meteor._runTestsEverywhere;

  recorded_arguments = null;

  Meteor._runTestsEverywhere = function(onReport, onComplete) {
    return recorded_arguments = {
      onReport: onReport,
      onComplete: onComplete
    };
  };

  runTests = function() {
    if (recorded_arguments == null) {
      throw new Error("oops, test-in-browser hasn't called _runTestsEverywhere yet");
    }
    return originalRunTestsEverywhere(recorded_arguments.onReport, recorded_arguments.onComplete);
  };

  runBeforeTests = null;

  numberOfWindowsToOpen = 0;

  childWindows = [];

  Meteor.windowtest = {
    numberOfWindowsToOpen: function(n) {
      return numberOfWindowsToOpen = n;
    },
    beforeTests: function(f) {
      if (runBeforeTests != null) {
        throw new Error("Can't call beforeTests more than once");
      }
      return runBeforeTests = f;
    }
  };

  Template.begin_tests.events({
    'click #begin-tests-button': function() {
      var i, _i;
      $('#begin-tests-div').hide();
      if (numberOfWindowsToOpen >= 1) {
        for (i = _i = 1; 1 <= numberOfWindowsToOpen ? _i <= numberOfWindowsToOpen : _i >= numberOfWindowsToOpen; i = 1 <= numberOfWindowsToOpen ? ++_i : --_i) {
          childWindows[i] = window.open("/child" + i, "child" + i, 'menubar=yes,toolbar=yes,location=yes,resizable=yes,scrollbars=yes,status=yes');
        }
      }
      if (runBeforeTests != null) {
        return runBeforeTests(function() {
          return runTests();
        });
      } else {
        return runTests();
      }
    }
  });

  Template.begin_tests.show = function() {
    return window.location.pathname === '/';
  };

  closeChildWindows = function() {
    return Meteor.BrowserMsg.send('close windows');
  };

  Meteor.autorun(function(handle) {
    if (!Template.test_table.running() && Template.test_table.passed()) {
      handle.stop();
      return closeChildWindows();
    }
  });

  if (window.location.pathname !== '/') {
    Meteor.BrowserMsg.listen({
      'close windows': function() {
        return window.close();
      }
    });
  }

}).call(this);
